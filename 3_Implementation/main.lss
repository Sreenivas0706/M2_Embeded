
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dc  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069f  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000365  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001df  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>

int main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	64 97       	sbiw	r28, 0x14	; 20
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int ch[]={0x90,0x80,0xF8,0x82,0x92,0x99,0xB0,0xA4,0xF9,0xC0};
  aa:	84 e1       	ldi	r24, 0x14	; 20
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	unsigned int i;
	DDRC=0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 b9       	out	0x07, r24	; 7
	DDRB=0xFF;
  c0:	84 b9       	out	0x04, r24	; 4
	DDRD=0xFF;
  c2:	8a b9       	out	0x0a, r24	; 10
	PORTB=(0<<5);
  c4:	15 b8       	out	0x05, r1	; 5
	PORTD=(0<<5);
  c6:	1b b8       	out	0x0b, r1	; 11

	while(1)
	{
		for(i=0;i<10;i++)
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <main+0x62>
		{
			PORTC=ch[i];
  ce:	fc 01       	movw	r30, r24
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	2c 0f       	add	r18, r28
  da:	3d 1f       	adc	r19, r29
  dc:	e2 0f       	add	r30, r18
  de:	f3 1f       	adc	r31, r19
  e0:	20 81       	ld	r18, Z
  e2:	28 b9       	out	0x08, r18	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	3f ef       	ldi	r19, 0xFF	; 255
  e6:	49 e6       	ldi	r20, 0x69	; 105
  e8:	28 e1       	ldi	r18, 0x18	; 24
  ea:	31 50       	subi	r19, 0x01	; 1
  ec:	40 40       	sbci	r20, 0x00	; 0
  ee:	20 40       	sbci	r18, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x54>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x5e>
  f4:	00 00       	nop
	PORTB=(0<<5);
	PORTD=(0<<5);

	while(1)
	{
		for(i=0;i<10;i++)
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	91 05       	cpc	r25, r1
  fc:	40 f3       	brcs	.-48     	; 0xce <main+0x38>
		{
			PORTC=ch[i];
			_delay_ms(1000);
		}
		PORTB=(0<<5);
  fe:	15 b8       	out	0x05, r1	; 5
		PORTD=(1<<5);
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	8b b9       	out	0x0b, r24	; 11

		for(i=6;i<10;i++)
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	15 c0       	rjmp	.+42     	; 0x134 <main+0x9e>
		{
			PORTC=ch[i];
 10a:	fc 01       	movw	r30, r24
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	2c 0f       	add	r18, r28
 116:	3d 1f       	adc	r19, r29
 118:	e2 0f       	add	r30, r18
 11a:	f3 1f       	adc	r31, r19
 11c:	20 81       	ld	r18, Z
 11e:	28 b9       	out	0x08, r18	; 8
 120:	3f ef       	ldi	r19, 0xFF	; 255
 122:	49 e6       	ldi	r20, 0x69	; 105
 124:	28 e1       	ldi	r18, 0x18	; 24
 126:	31 50       	subi	r19, 0x01	; 1
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x90>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x9a>
 130:	00 00       	nop
			_delay_ms(1000);
		}
		PORTB=(0<<5);
		PORTD=(1<<5);

		for(i=6;i<10;i++)
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	8a 30       	cpi	r24, 0x0A	; 10
 136:	91 05       	cpc	r25, r1
 138:	40 f3       	brcs	.-48     	; 0x10a <main+0x74>
		{
			PORTC=ch[i];
			_delay_ms(1000);
		}
		PORTB=(1<<5);
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	85 b9       	out	0x05, r24	; 5
		PORTD=(0<<5);
 13e:	1b b8       	out	0x0b, r1	; 11
		for(i=0;i<10;i++)
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	15 c0       	rjmp	.+42     	; 0x170 <main+0xda>
		{
			PORTC=ch[i];
 146:	fc 01       	movw	r30, r24
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	2c 0f       	add	r18, r28
 152:	3d 1f       	adc	r19, r29
 154:	e2 0f       	add	r30, r18
 156:	f3 1f       	adc	r31, r19
 158:	20 81       	ld	r18, Z
 15a:	28 b9       	out	0x08, r18	; 8
 15c:	3f ef       	ldi	r19, 0xFF	; 255
 15e:	49 e6       	ldi	r20, 0x69	; 105
 160:	28 e1       	ldi	r18, 0x18	; 24
 162:	31 50       	subi	r19, 0x01	; 1
 164:	40 40       	sbci	r20, 0x00	; 0
 166:	20 40       	sbci	r18, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0xcc>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xd6>
 16c:	00 00       	nop
			PORTC=ch[i];
			_delay_ms(1000);
		}
		PORTB=(1<<5);
		PORTD=(0<<5);
		for(i=0;i<10;i++)
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	8a 30       	cpi	r24, 0x0A	; 10
 172:	91 05       	cpc	r25, r1
 174:	40 f3       	brcs	.-48     	; 0x146 <main+0xb0>
		{
			PORTC=ch[i];
			_delay_ms(1000);
		}
		PORTB=(0<<5);
 176:	15 b8       	out	0x05, r1	; 5
		PORTD=(1<<5);
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	8b b9       	out	0x0b, r24	; 11
		for(i=6;i<10;i++)
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	15 c0       	rjmp	.+42     	; 0x1ac <main+0x116>
		{
			PORTC=ch[i];
 182:	fc 01       	movw	r30, r24
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	2c 0f       	add	r18, r28
 18e:	3d 1f       	adc	r19, r29
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
 194:	20 81       	ld	r18, Z
 196:	28 b9       	out	0x08, r18	; 8
 198:	3f ef       	ldi	r19, 0xFF	; 255
 19a:	49 e6       	ldi	r20, 0x69	; 105
 19c:	28 e1       	ldi	r18, 0x18	; 24
 19e:	31 50       	subi	r19, 0x01	; 1
 1a0:	40 40       	sbci	r20, 0x00	; 0
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x108>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x112>
 1a8:	00 00       	nop
			PORTC=ch[i];
			_delay_ms(1000);
		}
		PORTB=(0<<5);
		PORTD=(1<<5);
		for(i=6;i<10;i++)
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	8a 30       	cpi	r24, 0x0A	; 10
 1ae:	91 05       	cpc	r25, r1
 1b0:	40 f3       	brcs	.-48     	; 0x182 <main+0xec>
		{
			PORTC=ch[i];
			_delay_ms(1000);
		}
		PORTB=(0<<5);
 1b2:	15 b8       	out	0x05, r1	; 5
		PORTD=(0<<5);
 1b4:	1b b8       	out	0x0b, r1	; 11
	}
 1b6:	88 cf       	rjmp	.-240    	; 0xc8 <main+0x32>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
